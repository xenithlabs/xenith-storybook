import{j as e}from"./jsx-runtime-BhBAkL08.js";import{r as v}from"./index-caxmlYbZ.js";import{c as n}from"./cn-C-5SdYIA.js";import{t as w}from"./styles-BNEhTmYy.js";import{t as E}from"./stringCase-DaZl3p-i.js";import{L as d}from"./Label-CEq0ZV6F.js";import"./index-Bb4qSo10.js";import"./index-D3x6Zd7j.js";import"./index-DIE_uK0V.js";import"./index-D09aQd82.js";const r=v.forwardRef(({containerClassName:f,error:N,className:g,...s},j)=>e.jsx("div",{className:n("border w-full gap-2 overflow-hidden rounded-md shadow-input relative h-[76px] border-divider focus-within:border-border-accent focus-within:ring-0 ring-offset-0 px-[11px] py-[7px]",{"border-border-critical":N,"bg-bg-weaker":s.disabled},f),children:e.jsx("textarea",{className:n(w({variant:"paragraph"}),"border-0 focus:outline-none w-full h-full placeholder:text-text-weaker resize-none disabled:bg-bg-weaker disabled:cursor-not-allowed",g),ref:j,rows:3,...s,placeholder:s.placeholder?E(s.placeholder):"Notes"})}));r.displayName="TextArea";r.__docgenInfo={description:"",methods:[],displayName:"TextArea"};const R={title:"Xenith UI/Components/Text Area",component:r,tags:["autodocs"],render:()=>e.jsxs("div",{children:[e.jsx(d,{className:"mb-1",children:"Notes"}),e.jsx(r,{placeholder:"Enter notes"})]})},a={},o={render:()=>e.jsxs("div",{children:[e.jsx(d,{className:"mb-1",children:"Notes"}),e.jsx(r,{error:!0,placeholder:"Enter notes"})]})},t={render:()=>e.jsxs("div",{children:[e.jsx(d,{className:"mb-1",children:"Notes"}),e.jsx(r,{disabled:!0,placeholder:"Enter notes"})]})};var l,c,i;a.parameters={...a.parameters,docs:{...(l=a.parameters)==null?void 0:l.docs,source:{originalSource:"{}",...(i=(c=a.parameters)==null?void 0:c.docs)==null?void 0:i.source}}};var m,p,x;o.parameters={...o.parameters,docs:{...(m=o.parameters)==null?void 0:m.docs,source:{originalSource:`{
  render: () => <div>
      <Label className="mb-1">Notes</Label>
      <TextArea error placeholder="Enter notes" />
    </div>
}`,...(x=(p=o.parameters)==null?void 0:p.docs)==null?void 0:x.source}}};var b,u,h;t.parameters={...t.parameters,docs:{...(b=t.parameters)==null?void 0:b.docs,source:{originalSource:`{
  render: () => <div>
      <Label className="mb-1">Notes</Label>
      <TextArea disabled placeholder="Enter notes" />
    </div>
}`,...(h=(u=t.parameters)==null?void 0:u.docs)==null?void 0:h.source}}};const z=["Default","IsError","Disabled"];export{a as Default,t as Disabled,o as IsError,z as __namedExportsOrder,R as default};
